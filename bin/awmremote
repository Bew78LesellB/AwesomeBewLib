#!/usr/bin/env lua

local capi

function require_init()
		-- Grab environment
		capi = {
			print = print,
		}
end

require_init()

local Socket = require("socket")
local MsgPack = require("MessagePack")

if #arg == 0 then
	print()
	print("USAGE : " .. arg[0] .. " <eventName>")
	print()
	os.exit(false)
end

------------------------------------------
-- to use in shell like :
--
-- awesome-remote-client "my::event" <<EOF
--     {
--         arg1 = "value1",
--         arg2 = "value2",
--         arg3 = "value3",
--     }
-- EOF
------------------------------------------

local AwmRemote

function main(arg)

	local eventName = arg[1]
	local eventArgs
	if arg[2] then
		eventArgs = assert(loadstring("return " .. arg[2]))()
	end

	AwmRemote.init({verbose = true})
	print("sending...")
	local status = AwmRemote.sendEvent(eventName, eventArgs)
	print("sent")

	------------------------------------------

	print("success", status and "status: " .. tostring(status) or "")

end

function require_func(package)

	function require_awmremote()

		-- Module environment
		local AwesomeRemote = {}

		-- Grab dependancies
		local Socket = require("socket")
		local MsgPack = require("MessagePack")

		-- Private variables

		local config = {
			verbose = false,
		}

		local host = "localhost"
		local remotePortDir = "/tmp/awesome-remote"

		local servers = {}

		-- Private functions

		local function print(...)
			if not config.verbose then
				return false
			end
			return capi.print(...)
		end

		local function extractServerInfo(fileName)
			if not fileName then return end

			local file = io.open(fileName, "r")
			if not file then return end

			local infos = {
				port = file,
			}
			-- no more info to extract from file right now...
			file:close()

			return infos
		end

		local function lsFiles(directory)
			local files = {}
			for filename in io.popen('ls "' .. directory .. '"'):lines() do
				table.insert(files, filename)
			end
			return files
		end

		local function findRunningServers()
			local files = lsFiles(remotePortDir)

			print("finding running servers")

			-- empty the list of servers
			servers = {}

			for _, file in ipairs(files) do
				print("found " .. file)
				table.insert(servers, {
					port = file,
					info = extractServerInfo(file),
				})
			end
		end

		local function sendToServer(serverInfo, data)
			local tcp = Socket.tcp()
			if not tcp then return false end

			print("sending data at (" .. tostring(data) .. ") to server " .. serverInfo.port)

			local success, status = tcp:connect(host, serverInfo.port)
			if not success then return false end

			local packet = MsgPack.pack(data)
			local sent, status = tcp:send(string.len(packet) .. "\n")
			local sent, status = tcp:send(packet)
			-- TODO: do something with sent & status (to return false)
			return true
		end

		local function sendToAllServers(data)
			if not servers then return false end

			for _, serverInfo in ipairs(servers) do
				if not sendToServer(serverInfo, data) then
					return false
				end
			end
			return true
		end

		-- Public functions

		function AwesomeRemote.init(conf)
			local conf = conf or {}
			config.verbose = conf.verbose or false
			findRunningServers()
			print("There is " .. #servers .. " running Awesome instances")
		end

		function AwesomeRemote.sendEvent(eventName, eventArgs)
			local data = {
				format = "awesome",
				type = "event",
				data = {
					name = eventName,
					args = eventArgs,
				}
			}
			return sendToAllServers(data)
		end

		return AwesomeRemote

	end

	if package == "awmremote" then
		return require_awmremote()
	end
end



AwmRemote = require_func("awmremote")

main(arg)
